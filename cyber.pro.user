<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE QtCreatorProject>
<!-- Written by QtCreator 6.0.1, 2022-05-04T18:04:25. -->
<qtcreator>
 <data>
  <variable>EnvironmentId</variable>
  <value type="QByteArray">{6504a97a-6d84-4d94-814f-d14a55eea98a}</value>
 </data>
 <data>
  <variable>ProjectExplorer.Project.ActiveTarget</variable>
  <value type="qlonglong">0</value>
 </data>
 <data>
  <variable>ProjectExplorer.Project.EditorSettings</variable>
  <valuemap type="QVariantMap">
   <value type="bool" key="EditorConfiguration.AutoIndent">true</value>
   <value type="bool" key="EditorConfiguration.AutoSpacesForTabs">false</value>
   <value type="bool" key="EditorConfiguration.CamelCaseNavigation">true</value>
   <valuemap type="QVariantMap" key="EditorConfiguration.CodeStyle.0">
    <value type="QString" key="language">Cpp</value>
    <valuemap type="QVariantMap" key="value">
     <value type="QByteArray" key="CurrentPreferences">CppGlobal</value>
    </valuemap>
   </valuemap>
   <valuemap type="QVariantMap" key="EditorConfiguration.CodeStyle.1">
    <value type="QString" key="language">QmlJS</value>
    <valuemap type="QVariantMap" key="value">
     <value type="QByteArray" key="CurrentPreferences">QmlJSGlobal</value>
    </valuemap>
   </valuemap>
   <value type="qlonglong" key="EditorConfiguration.CodeStyle.Count">2</value>
   <value type="QByteArray" key="EditorConfiguration.Codec">UTF-8</value>
   <value type="bool" key="EditorConfiguration.ConstrainTooltips">false</value>
   <value type="int" key="EditorConfiguration.IndentSize">4</value>
   <value type="bool" key="EditorConfiguration.KeyboardTooltips">false</value>
   <value type="int" key="EditorConfiguration.MarginColumn">80</value>
   <value type="bool" key="EditorConfiguration.MouseHiding">true</value>
   <value type="bool" key="EditorConfiguration.MouseNavigation">true</value>
   <value type="int" key="EditorConfiguration.PaddingMode">1</value>
   <value type="bool" key="EditorConfiguration.PreferSingleLineComments">false</value>
   <value type="bool" key="EditorConfiguration.ScrollWheelZooming">true</value>
   <value type="bool" key="EditorConfiguration.ShowMargin">false</value>
   <value type="int" key="EditorConfiguration.SmartBackspaceBehavior">0</value>
   <value type="bool" key="EditorConfiguration.SmartSelectionChanging">true</value>
   <value type="bool" key="EditorConfiguration.SpacesForTabs">true</value>
   <value type="int" key="EditorConfiguration.TabKeyBehavior">0</value>
   <value type="int" key="EditorConfiguration.TabSize">8</value>
   <value type="bool" key="EditorConfiguration.UseGlobal">true</value>
   <value type="bool" key="EditorConfiguration.UseIndenter">false</value>
   <value type="int" key="EditorConfiguration.Utf8BomBehavior">1</value>
   <value type="bool" key="EditorConfiguration.addFinalNewLine">true</value>
   <value type="bool" key="EditorConfiguration.cleanIndentation">true</value>
   <value type="bool" key="EditorConfiguration.cleanWhitespace">true</value>
   <value type="QString" key="EditorConfiguration.ignoreFileTypes">*.md, *.MD, Makefile</value>
   <value type="bool" key="EditorConfiguration.inEntireDocument">false</value>
   <value type="bool" key="EditorConfiguration.skipTrailingWhitespace">true</value>
  </valuemap>
 </data>
 <data>
  <variable>ProjectExplorer.Project.PluginSettings</variable>
  <valuemap type="QVariantMap">
   <valuemap type="QVariantMap" key="AutoTest.ActiveFrameworks">
    <value type="bool" key="AutoTest.Framework.Boost">true</value>
    <value type="bool" key="AutoTest.Framework.CTest">false</value>
    <value type="bool" key="AutoTest.Framework.Catch">true</value>
    <value type="bool" key="AutoTest.Framework.GTest">true</value>
    <value type="bool" key="AutoTest.Framework.QtQuickTest">true</value>
    <value type="bool" key="AutoTest.Framework.QtTest">true</value>
   </valuemap>
   <valuemap type="QVariantMap" key="AutoTest.CheckStates">
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/atomic_hash_map_test.cc:AtomicHashMapTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/atomic_hash_map_test.cc:concurrency">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/atomic_hash_map_test.cc:int_int">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/atomic_hash_map_test.cc:int_str">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/atomic_rw_lock_test.cc:ReentrantRWLockTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/atomic_rw_lock_test.cc:read_lock">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/atomic_rw_lock_test.cc:write_lock">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/bounded_queue_test.cc:BoundedQueueTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/bounded_queue_test.cc:Dequeue">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/bounded_queue_test.cc:Enqueue">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/bounded_queue_test.cc:WaitDequeue">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/bounded_queue_test.cc:block_wait">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/bounded_queue_test.cc:busy_wait">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/bounded_queue_test.cc:concurrency">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/bounded_queue_test.cc:spin_wait">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/bounded_queue_test.cc:yield_wait">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/for_each_test.cc:ForEachTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/for_each_test.cc:base">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/object_pool_test.cc:CCObjectPoolTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/object_pool_test.cc:ObjectPoolTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/object_pool_test.cc:base">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/object_pool_test.cc:construct_all">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/object_pool_test.cc:construct_object">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/object_pool_test.cc:get_object">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/object_pool_test.cc:multi_thread">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/signal_test.cc:ConnectionTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/signal_test.cc:SignalTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/signal_test.cc:SlotTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/signal_test.cc:module">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/signal_test.cc:null_signal">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/signal_test.cc:two_input_params">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/signal_test.cc:zero_input_param">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/unbounded_queue_test.cc:UnboundedQueueTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/base/unbounded_queue_test.cc:all_in_one">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/blocker/blocker_manager_test.cc:blocker_intra_reader">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/blocker/blocker_manager_test.cc:blocker_intra_writer">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/blocker/blocker_manager_test.cc:blocker_manager_test">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/blocker/blocker_test.cc:BlockerTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/blocker/blocker_test.cc:constructor">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/blocker/blocker_test.cc:publish">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/blocker/blocker_test.cc:set_capacity">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/blocker/blocker_test.cc:subscribe">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/class_loader/class_loader_test.cc:ClassLoaderManagerTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/class_loader/class_loader_test.cc:ClassLoaderTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/class_loader/class_loader_test.cc:createClassObj">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/class_loader/class_loader_test.cc:createObjThreadSafety">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/class_loader/class_loader_test.cc:loadLibCounts">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/class_loader/class_loader_test.cc:loadLibThreadSafety">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/class_loader/class_loader_test.cc:multiTimesLoadunload">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/class_loader/class_loader_test.cc:testClassLoaderManager">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/class_loader/class_loader_test.cc:util_test">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/class_loader/shared_library/shared_library_test.cc:SharedLibraryTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/class_loader/shared_library/shared_library_test.cc:symbol_test_1">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/class_loader/shared_library/shared_library_test.cc:symbol_test_2">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/common/environment_test.cc:EnvironmentTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/common/environment_test.cc:get_env">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/common/environment_test.cc:work_root">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/common/file_test.cc:FileTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/common/file_test.cc:GetAbsolutePath">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/common/file_test.cc:GetFileName">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/common/file_test.cc:Glob">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/common/file_test.cc:ListSubPaths">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/common/file_test.cc:file_utils_test">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/common/file_test.cc:proto_set_get_test">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/common/log_test.cc:LogTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/common/log_test.cc:TestAll">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/common/macros_test.cc:MacrosTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/common/macros_test.cc:has_shut_down_test">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/common/macros_test.cc:shut_down_test">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/component/component_test.cc:CommonComponent">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/component/component_test.cc:CommonComponentFail">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/component/component_test.cc:init">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/component/timer_component_test.cc:TimerComponent">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/component/timer_component_test.cc:TimerComponentFalse">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/component/timer_component_test.cc:timerfail">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/component/timer_component_test.cc:timertest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/croutine/croutine_test.cc:Croutine">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/croutine/croutine_test.cc:croutinetest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/data/cache_buffer_test.cc:CacheBufferTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/data/cache_buffer_test.cc:cache_buffer_test">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/data/channel_buffer_test.cc:ChannelBufferTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/data/channel_buffer_test.cc:Fetch">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/data/channel_buffer_test.cc:FetchMulti">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/data/channel_buffer_test.cc:Latest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/data/data_dispatcher_test.cc:AddBuffer">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/data/data_dispatcher_test.cc:DataDispatcher">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/data/data_dispatcher_test.cc:Dispatch">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/data/data_visitor_test.cc:DataVisitorTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/data/data_visitor_test.cc:four_channel">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/data/data_visitor_test.cc:one_channel">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/data/data_visitor_test.cc:three_channel">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/data/data_visitor_test.cc:two_channel">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/data/fusion/all_latest_test.cc:AllLatestTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/data/fusion/all_latest_test.cc:four_channels">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/data/fusion/all_latest_test.cc:three_channels">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/data/fusion/all_latest_test.cc:two_channels">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/io/poller_test.cc:PollerTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/io/poller_test.cc:operation">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/logger/async_logger_test.cc:AsyncLoggerTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/logger/async_logger_test.cc:SetLoggerToGlog">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/logger/async_logger_test.cc:WriteAndFlush">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/logger/log_file_object_test.cc:LogFileObjectTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/logger/log_file_object_test.cc:init_and_write">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/logger/logger_test.cc:LoggerTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/logger/logger_test.cc:SetLoggerToGlog">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/logger/logger_test.cc:WriteAndFlush">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/logger/logger_util_test.cc:FindModuleName">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/logger/logger_util_test.cc:GetHostName">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/logger/logger_util_test.cc:LoggerUtilTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/logger/logger_util_test.cc:MaxLogSize">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/logger/logger_util_test.cc:PidHasChanged">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/message_header_test.cc:MessageHeaderTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/message_header_test.cc:content_size">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/message_header_test.cc:dst_id">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/message_header_test.cc:magic_num">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/message_header_test.cc:msg_type">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/message_header_test.cc:seq">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/message_header_test.cc:src_id">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/message_header_test.cc:timestamp_ns">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/message_traits_test.cc:MessageTraitsTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/message_traits_test.cc:byte_size">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/message_traits_test.cc:descriptor">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/message_traits_test.cc:message_type">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/message_traits_test.cc:parse_from_array">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/message_traits_test.cc:parse_from_string">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/message_traits_test.cc:serialize_parse_hc">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/message_traits_test.cc:serialize_to_array">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/message_traits_test.cc:serialize_to_string">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/message_traits_test.cc:type_trait">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/protobuf_factory_test.cc:ProtobufFactory">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/protobuf_factory_test.cc:register_and_generate">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/raw_message_test.cc:RawMessageTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/raw_message_test.cc:constructor">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/raw_message_test.cc:message_type">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/raw_message_test.cc:parse_from_array">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/raw_message_test.cc:parse_from_string">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/raw_message_test.cc:serialize_to_array">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/message/raw_message_test.cc:serialize_to_string">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/node/node_channel_impl_test.cc:Node_Channel_ImplTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/node/node_channel_impl_test.cc:test1">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/node/node_channel_impl_test.cc:test2">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/node/node_channel_impl_test.cc:test3">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/node/node_test.cc:NodeTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/node/node_test.cc:cases">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/node/reader_test.cc:ReaderTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/node/reader_test.cc:test1">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/node/reader_test.cc:test2">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/node/writer_reader_test.cc:WriterReaderTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/node/writer_reader_test.cc:constructor">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/node/writer_reader_test.cc:get_delay_sec">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/node/writer_reader_test.cc:init_and_shutdown">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/node/writer_reader_test.cc:messaging">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/node/writer_reader_test.cc:observe">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/node/writer_reader_test.cc:user_defined_message">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/node/writer_test.cc:WriterTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/node/writer_test.cc:test1">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/node/writer_test.cc:test2">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_client_test.cc:ParameterClientTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_client_test.cc:get_parameter">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_client_test.cc:list_parameter">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_client_test.cc:set_parameter">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_server_test.cc:ParameterServerTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_server_test.cc:get_parameter">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_server_test.cc:list_parameter">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_server_test.cc:set_parameter">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_test.cc:AsString">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_test.cc:ParameterTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_test.cc:as_bool">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_test.cc:as_double">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_test.cc:as_int">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_test.cc:constructors">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_test.cc:debug_string">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_test.cc:from_pb">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_test.cc:name">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_test.cc:to_pb">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_test.cc:type">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_test.cc:type_name">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/parameter/parameter_test.cc:value">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/python/internal/py_cyber_test.cc:PyCyberTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/python/internal/py_cyber_test.cc:create_reader">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/python/internal/py_cyber_test.cc:create_writer">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/python/internal/py_cyber_test.cc:init_ok">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/python/internal/py_record_test.cc:CyberRecordTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/python/internal/py_record_test.cc:record_readerwriter">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/record/file/record_file_integration_test.cc:RecordFileTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/record/file/record_file_integration_test.cc:SmallMessageHighThroughputOKThreadJitter">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/record/file/record_file_test.cc:ChunkTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/record/file/record_file_test.cc:TestAll">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/record/file/record_file_test.cc:TestIndex">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/record/file/record_file_test.cc:TestOneChunkFile">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/record/file/record_file_test.cc:TestOneMessageFile">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/record/record_reader_test.cc:RecordTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/record/record_reader_test.cc:TestReaderOrder">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/record/record_reader_test.cc:TestSingleRecordFile">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/record/record_viewer_test.cc:filter_test">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/record/record_viewer_test.cc:iterator_test">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/record/record_viewer_test.cc:iterator_test_reverse">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/record/record_viewer_test.cc:mult_iterator_test">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/scheduler/common/pin_thread_test.cc:PinThreadTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/scheduler/common/pin_thread_test.cc:affinity">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/scheduler/common/pin_thread_test.cc:parse_cpuset">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/scheduler/common/pin_thread_test.cc:pin_thread_test">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/scheduler/common/pin_thread_test.cc:sched_policy">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/scheduler/processor_test.cc:ProcessorTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/scheduler/processor_test.cc:all">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/scheduler/scheduler_choreo_test.cc:SchedulerChoreoTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/scheduler/scheduler_choreo_test.cc:choreo">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/scheduler/scheduler_choreo_test.cc:sched_choreo">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/scheduler/scheduler_classic_test.cc:SchedulerClassicTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/scheduler/scheduler_classic_test.cc:classic">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/scheduler/scheduler_classic_test.cc:sched_classic">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/scheduler/scheduler_test.cc:SchedulerTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/scheduler/scheduler_test.cc:create_task">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/scheduler/scheduler_test.cc:notify_task">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/scheduler/scheduler_test.cc:set_inner_thread_attr">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/container/graph_test.cc:GraphTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/container/graph_test.cc:edge">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/container/graph_test.cc:graph">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/container/graph_test.cc:vertice">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/container/multi_value_warehouse_test.cc:MultiValueWarehouseTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/container/multi_value_warehouse_test.cc:test1">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/container/single_value_warehouse_test.cc:SingleValueWarehouseTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/container/single_value_warehouse_test.cc:test1">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/container/warehouse_test.cc:WarehouseTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/container/warehouse_test.cc:add">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/container/warehouse_test.cc:get_all_roles">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/container/warehouse_test.cc:remove">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/container/warehouse_test.cc:search">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/container/warehouse_test.cc:size">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/role/role_test.cc:RoleTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/role/role_test.cc:constructor_getter_setter">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/role/role_test.cc:is_earlier_than">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/role/role_test.cc:rolebase_match">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/role/role_test.cc:roleserver_match">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/role/role_test.cc:rolewriter_match">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/channel_manager_test.cc:ChannelManagerTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/channel_manager_test.cc:change">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/channel_manager_test.cc:get_channel_names">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/channel_manager_test.cc:get_proto_desc">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/channel_manager_test.cc:get_readers_attr">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/channel_manager_test.cc:get_upstream_downstream">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/channel_manager_test.cc:get_writers_attr">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/channel_manager_test.cc:has_reader">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/channel_manager_test.cc:has_writer">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/channel_manager_test.cc:is_message_type_matching">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/node_manager_test.cc:NodeManagerTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/node_manager_test.cc:add_and_remove_change_listener">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/node_manager_test.cc:get_nodes">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/node_manager_test.cc:has_node">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/node_manager_test.cc:node_change">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/node_manager_test.cc:topo_module_leave">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/service_manager_test.cc:ServiceManagerTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/service_manager_test.cc:client_operation">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/service_manager_test.cc:server_operation">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/specific_manager/service_manager_test.cc:topo_module_leave">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/topology_manager_test.cc:TopologyTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/topology_manager_test.cc:add_and_remove_change_listener">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/service_discovery/topology_manager_test.cc:get_manager">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/sysmo/sysmo_test.cc:SysMoTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/sysmo/sysmo_test.cc:cases">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/task/task_test.cc:AsyncTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/task/task_test.cc:batch_run">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/task/task_test.cc:create_task">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/task/task_test.cc:run_member_function">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/time/clock_test.cc:Clock">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/time/clock_test.cc:MockTime">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/time/duration_test.cc:DurationTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/time/duration_test.cc:constructor">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/time/duration_test.cc:is_zero">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/time/duration_test.cc:operators">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/time/time_test.cc:TimeTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/time/time_test.cc:constructor">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/time/time_test.cc:is_zero">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/time/time_test.cc:now">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/time/time_test.cc:operators">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/time/time_test.cc:to_string">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/timer/timer_test.cc:TimerTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/timer/timer_test.cc:cycle">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/timer/timer_test.cc:one_shot">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/timer/timer_test.cc:sim_mode">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/timer/timer_test.cc:start_stop">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/common/endpoint_test.cc:EndpointTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/common/endpoint_test.cc:construction">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/common/identity_test.cc:IdentityTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/common/identity_test.cc:testConstructFalse">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/common/identity_test.cc:testConstructTrue">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/common/identity_test.cc:testIdentityEqual">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/common/identity_test.cc:testOperatorEqual">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/dispatcher/dispatcher_test.cc:DispatcherTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/dispatcher/dispatcher_test.cc:add_and_remove_listener">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/dispatcher/dispatcher_test.cc:has_channel">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/dispatcher/dispatcher_test.cc:shutdown">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/dispatcher/intra_dispatcher_test.cc:on_message">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/dispatcher/rtps_dispatcher_test.cc:RtpsDispatcherTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/dispatcher/rtps_dispatcher_test.cc:add_listener">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/dispatcher/rtps_dispatcher_test.cc:on_message">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/dispatcher/rtps_dispatcher_test.cc:shutdown">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/dispatcher/shm_dispatcher_test.cc:ShmDispatcherTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/dispatcher/shm_dispatcher_test.cc:add_listener">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/dispatcher/shm_dispatcher_test.cc:on_message">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/dispatcher/shm_dispatcher_test.cc:shutdown">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/integration_test/hybrid_transceiver_test.cc:HybridTransceiverTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/integration_test/hybrid_transceiver_test.cc:constructor">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/integration_test/hybrid_transceiver_test.cc:enable_and_disable_with_param_diff_host">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/integration_test/hybrid_transceiver_test.cc:enable_and_disable_with_param_no_relation">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/integration_test/hybrid_transceiver_test.cc:enable_and_disable_with_param_same_host_diff_proc">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/integration_test/hybrid_transceiver_test.cc:enable_and_disable_with_param_same_process">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/integration_test/intra_transceiver_test.cc:IntraTranceiverTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/integration_test/intra_transceiver_test.cc:constructor">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/integration_test/intra_transceiver_test.cc:enable_and_disable">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/integration_test/rtps_transceiver_test.cc:RtpsTransceiverTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/integration_test/rtps_transceiver_test.cc:constructor">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/integration_test/rtps_transceiver_test.cc:enable_and_disable">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/integration_test/shm_transceiver_test.cc:ShmTransceiverTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/integration_test/shm_transceiver_test.cc:constructor">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/integration_test/shm_transceiver_test.cc:enable_and_disable">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/message/message_info_test.cc:MessageInfoTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/message/message_info_test.cc:test">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/message/message_test.cc:HistoryTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/message/message_test.cc:ListenerHandlerTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/message/message_test.cc:history_test">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/message/message_test.cc:listener_handler_test">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/message/message_test.cc:message_info_test">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/rtps/rtps_test.cc:AttributesFillerTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/rtps/rtps_test.cc:ParticipantTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/rtps/rtps_test.cc:UnderlayMessageTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/rtps/rtps_test.cc:fill_in_pub_attr_test">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/rtps/rtps_test.cc:fill_in_sub_attr_test">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/rtps/rtps_test.cc:participant_test">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/rtps/rtps_test.cc:underlay_message_test">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/shm/condition_notifier_test.cc:ConditionNotifierTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/shm/condition_notifier_test.cc:constructor">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/shm/condition_notifier_test.cc:notify_listen">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/shm/condition_notifier_test.cc:shutdown">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/transport_test.cc:TransportTest">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/transport_test.cc:constructor">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/transport_test.cc:create_receiver">Checked</value>
    <value type="Qt::CheckState" key="1@/w/opensource/apollo/cyber/transport/transport_test.cc:create_transmitter">Checked</value>
   </valuemap>
   <value type="int" key="AutoTest.RunAfterBuild">0</value>
   <value type="bool" key="AutoTest.UseGlobal">true</value>
   <valuemap type="QVariantMap" key="ClangTools">
    <value type="bool" key="ClangTools.AnalyzeOpenFiles">true</value>
    <value type="bool" key="ClangTools.BuildBeforeAnalysis">true</value>
    <value type="QString" key="ClangTools.DiagnosticConfig">Builtin.DefaultTidyAndClazy</value>
    <value type="int" key="ClangTools.ParallelJobs">6</value>
    <valuelist type="QVariantList" key="ClangTools.SelectedDirs"/>
    <valuelist type="QVariantList" key="ClangTools.SelectedFiles"/>
    <valuelist type="QVariantList" key="ClangTools.SuppressedDiagnostics"/>
    <value type="bool" key="ClangTools.UseGlobalSettings">true</value>
   </valuemap>
   <valuemap type="QVariantMap" key="CppEditor.QuickFix">
    <value type="bool" key="UseGlobalSettings">true</value>
   </valuemap>
  </valuemap>
 </data>
 <data>
  <variable>ProjectExplorer.Project.Target.0</variable>
  <valuemap type="QVariantMap">
   <value type="QString" key="DeviceType">Desktop</value>
   <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Replacement for &quot;Qt 5.14.2 (gcc_64)&quot;</value>
   <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Replacement for &quot;Qt 5.14.2 (gcc_64)&quot;</value>
   <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">{0eddca61-2c00-448f-a721-701ec7b2103c}</value>
   <value type="qlonglong" key="ProjectExplorer.Target.ActiveBuildConfiguration">0</value>
   <value type="qlonglong" key="ProjectExplorer.Target.ActiveDeployConfiguration">0</value>
   <value type="qlonglong" key="ProjectExplorer.Target.ActiveRunConfiguration">0</value>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.BuildConfiguration.0">
    <value type="int" key="EnableQmlDebugging">0</value>
    <value type="QString" key="ProjectExplorer.BuildConfiguration.BuildDirectory">/w/opensource/apollo/build-cyber-Qt_5_14_2_gcc_64-Debug</value>
    <value type="QString" key="ProjectExplorer.BuildConfiguration.BuildDirectory.shadowDir">/w/opensource/apollo/build-cyber-Qt_5_14_2_gcc_64-Debug</value>
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">QtProjectManager.QMakeBuildStep</value>
      <value type="bool" key="QtProjectManager.QMakeBuildStep.QMakeForced">false</value>
      <valuelist type="QVariantList" key="QtProjectManager.QMakeBuildStep.SelectedAbis"/>
     </valuemap>
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.1">
      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.MakeStep</value>
     </valuemap>
     <value type="qlonglong" key="ProjectExplorer.BuildStepList.StepsCount">2</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Build</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Build</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Build</value>
    </valuemap>
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.1">
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.MakeStep</value>
      <value type="QString" key="Qt4ProjectManager.MakeStep.MakeArguments">clean</value>
     </valuemap>
     <value type="qlonglong" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Clean</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Clean</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Clean</value>
    </valuemap>
    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">2</value>
    <value type="bool" key="ProjectExplorer.BuildConfiguration.ClearSystemEnvironment">false</value>
    <valuelist type="QVariantList" key="ProjectExplorer.BuildConfiguration.CustomParsers"/>
    <value type="bool" key="ProjectExplorer.BuildConfiguration.ParseStandardOutput">false</value>
    <valuelist type="QVariantList" key="ProjectExplorer.BuildConfiguration.UserEnvironmentChanges"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Debug</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.Qt4BuildConfiguration</value>
    <value type="int" key="Qt4ProjectManager.Qt4BuildConfiguration.BuildConfiguration">2</value>
   </valuemap>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.BuildConfiguration.1">
    <value type="QString" key="ProjectExplorer.BuildConfiguration.BuildDirectory">/w/opensource/apollo/build-cyber-Qt_5_14_2_gcc_64-Release</value>
    <value type="QString" key="ProjectExplorer.BuildConfiguration.BuildDirectory.shadowDir">/w/opensource/apollo/build-cyber-Qt_5_14_2_gcc_64-Release</value>
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">QtProjectManager.QMakeBuildStep</value>
      <value type="bool" key="QtProjectManager.QMakeBuildStep.QMakeForced">false</value>
      <valuelist type="QVariantList" key="QtProjectManager.QMakeBuildStep.SelectedAbis"/>
     </valuemap>
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.1">
      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.MakeStep</value>
     </valuemap>
     <value type="qlonglong" key="ProjectExplorer.BuildStepList.StepsCount">2</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Build</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Build</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Build</value>
    </valuemap>
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.1">
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.MakeStep</value>
      <value type="QString" key="Qt4ProjectManager.MakeStep.MakeArguments">clean</value>
     </valuemap>
     <value type="qlonglong" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Clean</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Clean</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Clean</value>
    </valuemap>
    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">2</value>
    <value type="bool" key="ProjectExplorer.BuildConfiguration.ClearSystemEnvironment">false</value>
    <valuelist type="QVariantList" key="ProjectExplorer.BuildConfiguration.CustomParsers"/>
    <value type="bool" key="ProjectExplorer.BuildConfiguration.ParseStandardOutput">false</value>
    <valuelist type="QVariantList" key="ProjectExplorer.BuildConfiguration.UserEnvironmentChanges"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Release</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.Qt4BuildConfiguration</value>
    <value type="int" key="Qt4ProjectManager.Qt4BuildConfiguration.BuildConfiguration">0</value>
    <value type="int" key="QtQuickCompiler">0</value>
   </valuemap>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.BuildConfiguration.2">
    <value type="int" key="EnableQmlDebugging">0</value>
    <value type="QString" key="ProjectExplorer.BuildConfiguration.BuildDirectory">/w/opensource/apollo/build-cyber-Qt_5_14_2_gcc_64-Profile</value>
    <value type="QString" key="ProjectExplorer.BuildConfiguration.BuildDirectory.shadowDir">/w/opensource/apollo/build-cyber-Qt_5_14_2_gcc_64-Profile</value>
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">QtProjectManager.QMakeBuildStep</value>
      <value type="bool" key="QtProjectManager.QMakeBuildStep.QMakeForced">false</value>
      <valuelist type="QVariantList" key="QtProjectManager.QMakeBuildStep.SelectedAbis"/>
     </valuemap>
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.1">
      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.MakeStep</value>
     </valuemap>
     <value type="qlonglong" key="ProjectExplorer.BuildStepList.StepsCount">2</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Build</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Build</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Build</value>
    </valuemap>
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.1">
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.MakeStep</value>
      <value type="QString" key="Qt4ProjectManager.MakeStep.MakeArguments">clean</value>
     </valuemap>
     <value type="qlonglong" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Clean</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Clean</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Clean</value>
    </valuemap>
    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">2</value>
    <value type="bool" key="ProjectExplorer.BuildConfiguration.ClearSystemEnvironment">false</value>
    <valuelist type="QVariantList" key="ProjectExplorer.BuildConfiguration.CustomParsers"/>
    <value type="bool" key="ProjectExplorer.BuildConfiguration.ParseStandardOutput">false</value>
    <valuelist type="QVariantList" key="ProjectExplorer.BuildConfiguration.UserEnvironmentChanges"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Profile</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.Qt4BuildConfiguration</value>
    <value type="int" key="Qt4ProjectManager.Qt4BuildConfiguration.BuildConfiguration">0</value>
    <value type="int" key="QtQuickCompiler">0</value>
    <value type="int" key="SeparateDebugInfo">0</value>
   </valuemap>
   <value type="qlonglong" key="ProjectExplorer.Target.BuildConfigurationCount">3</value>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.DeployConfiguration.0">
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
     <value type="qlonglong" key="ProjectExplorer.BuildStepList.StepsCount">0</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Deploy</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Deploy</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Deploy</value>
    </valuemap>
    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">1</value>
    <valuemap type="QVariantMap" key="ProjectExplorer.DeployConfiguration.CustomData"/>
    <value type="bool" key="ProjectExplorer.DeployConfiguration.CustomDataEnabled">false</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.DefaultDeployConfiguration</value>
   </valuemap>
   <value type="qlonglong" key="ProjectExplorer.Target.DeployConfigurationCount">1</value>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.0">
    <value type="bool" key="Analyzer.Perf.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.QmlProfiler.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.Valgrind.Settings.UseGlobalSettings">true</value>
    <valuelist type="QVariantList" key="CustomOutputParsers"/>
    <value type="int" key="PE.EnvironmentAspect.Base">2</value>
    <valuelist type="QVariantList" key="PE.EnvironmentAspect.Changes"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.Qt4RunConfiguration:/w/opensource/apollo/cyber/cyber.pro</value>
    <value type="QString" key="ProjectExplorer.RunConfiguration.BuildKey">/w/opensource/apollo/cyber/cyber.pro</value>
    <value type="bool" key="RunConfiguration.UseCppDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseCppDebuggerAuto">true</value>
    <value type="bool" key="RunConfiguration.UseLibrarySearchPath">true</value>
    <value type="bool" key="RunConfiguration.UseQmlDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseQmlDebuggerAuto">true</value>
    <value type="QString" key="RunConfiguration.WorkingDirectory.default">/w/opensource/apollo/build-cyber-Qt_5_14_2_gcc_64-Debug</value>
   </valuemap>
   <value type="qlonglong" key="ProjectExplorer.Target.RunConfigurationCount">1</value>
  </valuemap>
 </data>
 <data>
  <variable>ProjectExplorer.Project.TargetCount</variable>
  <value type="qlonglong">1</value>
 </data>
 <data>
  <variable>ProjectExplorer.Project.Updater.FileVersion</variable>
  <value type="int">22</value>
 </data>
 <data>
  <variable>Version</variable>
  <value type="int">22</value>
 </data>
</qtcreator>
